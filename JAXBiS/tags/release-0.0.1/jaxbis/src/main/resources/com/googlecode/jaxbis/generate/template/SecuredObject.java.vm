#*
 *
 * Copyright (c) 2010, Joachim Draeger, Jon Herrmann, Simon MÃ¼ller
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of JAXBiS nor the names of its contributors may
 *       be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *#

package ${bean.packageName};

import com.googlecode.jaxbis.crypt.KeyRing;

#if( $bean.hasSecuredMembers() )
import com.googlecode.jaxbis.api.SecuredMember;
import com.googlecode.jaxbis.api.SecurityType;
#end
import com.googlecode.jaxbis.api.SecuredObject;
#if( $bean.hasSecuredMembers() )
import com.googlecode.jaxbis.crypt.PlainInstanceBuilder;
#end
#if( $bean.hasCollectionBeanReferences() )
import com.googlecode.jaxbis.crypt.SecuredCollectionBuilder;
#end
#if( $bean.hasSecuredCollectionMembers() )
import com.googlecode.jaxbis.crypt.CollectionWrapper;
#end

/*
 * JAXBIS AUTOGENERATED CLASS
 */

public class Secured${bean.className} implements SecuredObject<${bean.className}> {
## Generate unsecured member variables, getters and setters
#foreach( $attribute in $bean.notSecuredDirectAttributes )
    
    private ${attribute.type.name} ${attribute.name};
    
    public void set${attribute.nameFirstUp}(
        final ${attribute.type.name} ${attribute.name}) {
        this.${attribute.name} = ${attribute.name};
    }
    
    public ${attribute.type.name} get${attribute.nameFirstUp}() {
        return ${attribute.name};
    }
#end
#foreach( $attribute in $bean.notSecuredCollectionAttributes )
    
    private ${attribute.collectionType.name}< 
        ${attribute.type.name}> ${attribute.name};
    
    public void set${attribute.nameFirstUp}(
        final ${attribute.collectionType.name}<
            ${attribute.type.name}> ${attribute.name}) {
        this.${attribute.name} = ${attribute.name};
    }
    
    public ${attribute.collectionType.name}<${attribute.type.name}> get${attribute.nameFirstUp}() {
        return ${attribute.name};
    }
    
#end
#foreach( $attribute in $bean.securedAttributesAndBeanReferences )
    private SecuredMember secured${attribute.nameFirstUp};
    
    public void setSecured${attribute.nameFirstUp}(
        final SecuredMember secured${attribute.nameFirstUp}) {
        this.secured${attribute.nameFirstUp} = secured${attribute.nameFirstUp};
    }
    
    public SecuredMember getSecured${attribute.nameFirstUp}() {
        return secured${attribute.nameFirstUp};
    }
#end
#foreach( $beanReference in $bean.notSecuredDirectBeanReferences )
#set( $class = "${beanReference.type.package.name}.Secured${beanReference.type.simpleName}" )
     
    private ${class} ${beanReference.name};
    
    public void set${beanReference.nameFirstUp}(
        final ${class} ${beanReference.name}) {
        this.${beanReference.name} = ${beanReference.name};
    }
    
    public ${class} get${beanReference.nameFirstUp}() {
        return ${beanReference.name};
    }
#end
#foreach( $beanReference in $bean.notSecuredCollectionBeanReferences )
#set( $class = "${beanReference.bean.packageName}.Secured${beanReference.bean.className}" )
     
    private java.util.Collection<
        ${class}> ${beanReference.name};
    
    public void set${beanReference.nameFirstUp}(
        final java.util.Collection<
            ${class}> ${beanReference.name}) {
        this.${beanReference.name} = ${beanReference.name};
    }
    
    public java.util.Collection<
        ${class}> get${beanReference.nameFirstUp}() {
        return ${beanReference.name};
    }
#end
#if( $bean.hasSecuredCollectionMembers() )
    @SuppressWarnings("unchecked")
#end    
    @Override
    public $bean.className getPlainInstance(final KeyRing keyRing) {
        
        final $bean.className decrpytedObject = new $bean.getClassName()();

#if( $bean.hasSecuredMembers() )        
        final PlainInstanceBuilder plainInstanceBuilder = 
            new PlainInstanceBuilder(keyRing);
#end

#foreach( $attribute in $bean.notSecuredAttributes )
        decrpytedObject.set${attribute.nameFirstUp}(get${attribute.nameFirstUp}());
#end
#foreach( $attribute in $bean.notSecuredDirectBeanReferences )
        decrpytedObject.set${attribute.nameFirstUp}(
            get${attribute.nameFirstUp}().getPlainInstance(keyRing));
#end

#foreach( $beanRef in $bean.notSecuredCollectionBeanReferences )
        decrpytedObject.set${beanRef.nameFirstUp}(
            SecuredCollectionBuilder.createPlain(
                get${beanRef.nameFirstUp}(), keyRing)
        );                
#end        
    
#foreach( $attribute in $bean.securedDirectAttributes )
        decrpytedObject.set${attribute.nameFirstUp}(
            plainInstanceBuilder.createPlainInstance(
                getSecured${attribute.nameFirstUp}(),
                ${attribute.type.name}.class,
                SecurityType.${attribute.securityType})
        );
#end

#foreach( $attribute in $bean.securedCollectionAttributes )
        decrpytedObject.set${attribute.nameFirstUp}(
            (${attribute.collectionType.name}<${attribute.type.name}>)
            plainInstanceBuilder.createPlainInstance(
                getSecured${attribute.nameFirstUp}(),
                CollectionWrapper.class,
                SecurityType.${attribute.securityType}).getElement()
        );
#end

#foreach( $beanRef in $bean.securedDirectBeanReferences )
        decrpytedObject.set${beanRef.nameFirstUp}(
            plainInstanceBuilder.createPlainInstanceRecursive(
                getSecured${beanRef.nameFirstUp}(),
                ${beanRef.bean.packageName}.Secured${beanRef.bean.className}.class,
                SecurityType.${beanRef.securityType})
        );                
#end

#foreach( $beanRef in $bean.securedCollectionBeanReferences )
        decrpytedObject.set${beanRef.nameFirstUp}(
            SecuredCollectionBuilder.createPlainForRef(
            (java.util.Collection<
                ${beanRef.bean.packageName}.Secured${beanRef.bean.className}>)
            plainInstanceBuilder.createPlainInstance(
                getSecured${beanRef.nameFirstUp}(),
                CollectionWrapper.class,
                SecurityType.${beanRef.securityType}).getElement(),
                ${beanRef.bean.packageName}.Secured${beanRef.bean.className}.class,
                keyRing)
        );                
#end
        
        return decrpytedObject;
    }
}
