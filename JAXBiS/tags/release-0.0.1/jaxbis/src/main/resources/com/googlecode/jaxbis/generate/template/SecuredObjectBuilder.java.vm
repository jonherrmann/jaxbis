#*
 *
 * Copyright (c) 2010, Joachim Draeger, Jon Herrmann, Simon MÃ¼ller
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of JAXBiS nor the names of its contributors may
 *       be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *#

package ${bean.packageName};
import com.googlecode.jaxbis.crypt.KeyRing;

import com.googlecode.jaxbis.api.SecuredObjectBuilder;

#if( $bean.hasSecuredMembers() )
import com.googlecode.jaxbis.crypt.SecuredMemberBuilder;
import com.googlecode.jaxbis.api.SecurityType;
#end
#if( $bean.hasSecuredCollectionMembers() )
import com.googlecode.jaxbis.crypt.CollectionWrapper;
#end
#if( $bean.hasCollectionBeanReferences() )
import com.googlecode.jaxbis.crypt.SecuredCollectionBuilder;
#end

/*
 * JAXBIS AUTOGENERATED CLASS
 */

public class Secured${bean.className}Builder
    implements SecuredObjectBuilder<${bean.className}, Secured${bean.className}> {
#if( $bean.hasSecuredObjects() )   
    private KeyRing keyRing;
#end  
 
    public Secured${bean.className}Builder(final KeyRing keyRing) {
#if( $bean.hasSecuredObjects() )     
        this.keyRing = keyRing;
#end           
    }
    public Secured${bean.className} createOrNull(
        final ${bean.className} unsecuredObject) {
        if (unsecuredObject != null) {
            return create(unsecuredObject);
        } else {
            return null;
        }
    }
    
    public Secured${bean.className} create(
        final ${bean.className} unsecuredObject) {
   
        final Secured$bean.className securedObject = new Secured${bean.className}();
#if( $bean.hasSecuredMembers() )
        final SecuredMemberBuilder secMemBuilder = new SecuredMemberBuilder(
            keyRing);
#end            
       
#foreach( $attribute in $bean.notSecuredAttributes )
        securedObject.set${attribute.nameFirstUp}(
            unsecuredObject.get${attribute.nameFirstUp}());
#end
       
#foreach( $beanRef in $bean.notSecuredCollectionBeanReferences )
        securedObject.set${beanRef.nameFirstUp}(
                SecuredCollectionBuilder.create(
                new ${beanRef.bean.packageName}.Secured${beanRef.bean.className}Builder(
                    keyRing), unsecuredObject.get${beanRef.nameFirstUp}()));
#end    

#foreach( $beanRef in $bean.notSecuredDirectBeanReferences )
        securedObject.set${beanRef.nameFirstUp}(
                new ${beanRef.bean.packageName}.Secured${beanRef.bean.className}Builder(
                    keyRing).create(
                        unsecuredObject.get${beanRef.nameFirstUp}()));
#end    
       
#foreach( $attribute in $bean.securedDirectAttributes )
        securedObject.setSecured${attribute.nameFirstUp}(
            secMemBuilder.createSecuredMemberOrNull(
            unsecuredObject.get${attribute.nameFirstUp}(),
            "${attribute.name}",
            SecurityType.${attribute.securityType})
         );
#end

#foreach( $attribute in $bean.securedCollectionAttributes )
        securedObject.setSecured${attribute.nameFirstUp}(
            secMemBuilder.createSecuredMember(
                new CollectionWrapper(unsecuredObject.get${attribute.nameFirstUp}()),
                "${attribute.name}",
                SecurityType.${attribute.securityType})
         );
#end

#foreach( $beanRef in $bean.securedDirectBeanReferences )
        securedObject.setSecured${beanRef.nameFirstUp}(
            secMemBuilder.createSecuredMemberOrNull(
            new ${beanRef.bean.packageName}.Secured${beanRef.bean.className}Builder(
                keyRing).createOrNull(
                    unsecuredObject.get${beanRef.nameFirstUp}()),
            "${beanRef.name}",
            SecurityType.${beanRef.securityType})
                
         );
#end

#foreach( $beanRef in $bean.securedCollectionBeanReferences )
        securedObject.setSecured${beanRef.nameFirstUp}(
            secMemBuilder.createSecuredMemberFromCollection(
                SecuredCollectionBuilder.create(
                new ${beanRef.bean.packageName}.Secured${beanRef.bean.className}Builder(
                    keyRing), unsecuredObject.get${beanRef.nameFirstUp}()),
                ${beanRef.bean.packageName}.Secured${beanRef.bean.className}.class,    
                "${beanRef.name}",
                SecurityType.${beanRef.securityType})
        );
#end
        
        return securedObject;
    }
}
